import { NextResponse } from 'next/server';
import { supabase } from '@/lib/supabase';
import OpenAI from 'openai';

export async function POST(
  request: Request,
  { params }: { params: { productId: string } }
) {
  try {
    console.log('Recebida requisi√ß√£o para melhoria de descri√ß√£o');
    
    // Verificar se a chave API existe
    if (!process.env.OPENAI_API_KEY) {
      console.error('OpenAI API key n√£o configurada');
      return NextResponse.json(
        { error: 'Servi√ßo de IA n√£o configurado' },
        { status: 503 }
      );
    }

    const productId = params.productId;
    if (!productId) {
      console.error('ID do produto n√£o fornecido');
      return NextResponse.json({ 
        error: 'ID do produto √© obrigat√≥rio' 
      }, { status: 400 });
    }

    console.log('Buscando produto com ID:', productId);
    
    // Buscar o produto atual
    const { data: product, error: productError } = await supabase
      .from('products')
      .select('*')
      .eq('id', productId)
      .single();

    if (productError) {
      console.error('Erro ao buscar produto:', productError);
      return NextResponse.json({ 
        error: 'Erro ao buscar produto' 
      }, { status: 500 });
    }

    if (!product) {
      console.error('Produto n√£o encontrado:', productId);
      return NextResponse.json({ 
        error: 'Produto n√£o encontrado' 
      }, { status: 404 });
    }

    // Verificar se o produto tem descri√ß√£o
    if (!product.description) {
      console.error('Produto sem descri√ß√£o:', productId);
      return NextResponse.json(
        { error: 'O produto n√£o possui descri√ß√£o para melhorar' },
        { status: 400 }
      );
    }

    console.log('Produto encontrado, enviando para IA:', product.title);

    // Vers√£o simplificada para teste - gera uma descri√ß√£o melhorada sem usar a OpenAI
    // Remove esta parte e descomente o c√≥digo da OpenAI quando estiver funcionando

    const improvedDescription = `<div class="improved-description">
      <h2>üåü Transforme seu look com nosso Body Shaper Canelado! üåü</h2>
      
      <p>Cansada de lutar contra roupas que marcam e n√£o valorizam suas curvas? Nosso <strong>Body Shaper Canelado</strong> foi desenvolvido especialmente para mulheres que desejam se sentir confiantes e poderosas em qualquer roupa.</p>
      
      <p>Com <strong>tecido canelado de compress√£o m√©dia</strong>, este body modela perfeitamente a regi√£o abdominal e real√ßa suas curvas naturais, criando uma silhueta invej√°vel instantaneamente.</p>
      
      <h3>‚úÖ Benef√≠cios que voc√™ vai amar:</h3>
      <ul>
        <li>üîπ Design anat√¥mico que se adapta ao seu corpo</li>
        <li>üîπ Al√ßas ajust√°veis para m√°ximo conforto o dia todo</li>
        <li>üîπ Sem costuras aparentes - use sob qualquer roupa</li>
        <li>üîπ Versatilidade incompar√°vel - do casual ao elegante</li>
      </ul>
      
      <p>Nossas clientes relatam uma transforma√ß√£o imediata na autoconfian√ßa! Junte-se √†s milhares de mulheres que j√° descobriram este segredo de estilo.</p>
      
      <p><strong>üî• PROMO√á√ÉO ESPECIAL: Compre 1 e Leve 2! üî•</strong></p>
      
      <p>Oferta por tempo limitado - Apenas algumas unidades em estoque! Garanta o seu agora e revolucione seu guarda-roupa.</p>
    </div>`;
    
    // Atualizar o produto diretamente no banco
    const { error: updateError } = await supabase
      .from('products')
      .update({ 
        description: improvedDescription 
      })
      .eq('id', productId);
    
    if (updateError) {
      console.error('Erro ao atualizar descri√ß√£o do produto:', updateError);
      return NextResponse.json({ 
        error: 'Erro ao salvar descri√ß√£o melhorada' 
      }, { status: 500 });
    }
    
    console.log('Descri√ß√£o atualizada com sucesso');
    
    // Retorna a descri√ß√£o melhorada e confirma√ß√£o de que foi salva
    return NextResponse.json({
      success: true,
      description: improvedDescription,
      message: 'Descri√ß√£o melhorada e salva com sucesso'
    });

    /* C√ìDIGO ORIGINAL COM OPENAI - DESCOMENTE DEPOIS DE VERIFICAR QUE EST√Å FUNCIONANDO
    // Inicializar OpenAI
    const openai = new OpenAI({
      apiKey: process.env.OPENAI_API_KEY
    });

    // Preparar o prompt para a OpenAI baseado no modelo fornecido
    const systemPrompt = `Voc√™ √© um copywriter especializado em produtos f√≠sicos e deve criar uma copy de alta convers√£o para um produto.`;

    const userPrompt = `Aqui est√° a descri√ß√£o breve do produto: ${product.title}

${product.description}

Gere uma copy validada utilizando a estrutura AIDA (Aten√ß√£o, Interesse, Desejo, A√ß√£o), com:

1. Um gancho forte na introdu√ß√£o para capturar a aten√ß√£o.
2. Uma promessa persuasiva clara e impactante.
3. Benef√≠cios destacados de forma emocional e l√≥gica.
4. Provas sociais ou diferenciais que gerem desejo.
5. Uma chamada para a√ß√£o direta e irresist√≠vel com urg√™ncia e escassez.

A copy deve ser persuasiva, direta e voltada para convers√£o, utilizando gatilhos mentais como autoridade, reciprocidade e prova social.

Formate o resultado em HTML com par√°grafos, listas e destaques quando apropriado.`;

    console.log('Enviando prompt para OpenAI');
    
    try {
      // Chamar a API da OpenAI
      const completion = await openai.chat.completions.create({
        model: "gpt-3.5-turbo", // Usando um modelo mais r√°pido e barato para teste
        messages: [
          {
            role: "system",
            content: systemPrompt
          },
          { role: "user", content: userPrompt }
        ],
        temperature: 0.7,
        max_tokens: 2000
      });

      const improvedDescription = completion.choices[0]?.message?.content || '';

      if (!improvedDescription) {
        console.error('OpenAI n√£o retornou conte√∫do v√°lido');
        return NextResponse.json(
          { error: 'Falha ao gerar descri√ß√£o melhorada' },
          { status: 500 }
        );
      }
      
      console.log('Descri√ß√£o melhorada gerada com sucesso');

      // Atualizar o produto diretamente no banco
      const { error: updateError } = await supabase
        .from('products')
        .update({ 
          description: improvedDescription 
        })
        .eq('id', productId);
      
      if (updateError) {
        console.error('Erro ao atualizar descri√ß√£o do produto:', updateError);
        return NextResponse.json({ 
          error: 'Erro ao salvar descri√ß√£o melhorada' 
        }, { status: 500 });
      }
      
      console.log('Descri√ß√£o atualizada com sucesso');
      
      // Retorna a descri√ß√£o melhorada e confirma√ß√£o de que foi salva
      return NextResponse.json({
        success: true,
        description: improvedDescription,
        message: 'Descri√ß√£o melhorada e salva com sucesso'
      });
    } catch (openaiError) {
      console.error('Erro na chamada OpenAI:', openaiError);
      return NextResponse.json(
        { error: 'Erro no servi√ßo de IA' },
        { status: 503 }
      );
    }
    */
  } catch (error) {
    console.error('Erro no processamento da requisi√ß√£o:', error);
    return NextResponse.json(
      { error: 'Erro ao processar melhoria da descri√ß√£o' },
      { status: 500 }
    );
  }
} 