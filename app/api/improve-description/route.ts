import { NextResponse, NextRequest } from 'next/server';
import { supabase } from '@/lib/supabase';
import OpenAI from 'openai';

export async function POST(request: NextRequest) {
  try {
    console.log('Recebida requisi√ß√£o para melhoria de descri√ß√£o');
    
    // Verificar se a chave API existe
    if (!process.env.OPENAI_API_KEY) {
      console.error('OpenAI API key n√£o configurada');
      return NextResponse.json(
        { error: 'Servi√ßo de IA n√£o configurado' },
        { status: 503 }
      );
    }

    // Inicializar OpenAI
    const openai = new OpenAI({
      apiKey: process.env.OPENAI_API_KEY
    });

    // Verificar se o modo pro_copy est√° ativado na URL ou no corpo
    const modeParam = request.nextUrl.searchParams.get('mode');
    let isProCopyMode = modeParam === 'pro_copy';
    
    // Parse do corpo da requisi√ß√£o
    let body;
    try {
      body = await request.json();
      console.log('Body da requisi√ß√£o:', body);
      
      // Tamb√©m pode verificar o modo no corpo da requisi√ß√£o
      if (body.mode === 'pro_copy' && !isProCopyMode) {
        console.log('Modo Pro Copy detectado no corpo da requisi√ß√£o');
        isProCopyMode = true;
      }
      
    } catch (e) {
      console.error('Erro ao parsear o corpo da requisi√ß√£o:', e);
      return NextResponse.json(
        { error: 'Corpo da requisi√ß√£o inv√°lido' },
        { status: 400 }
      );
    }
    
    if (isProCopyMode) {
      console.log('üöÄ Iniciando gera√ß√£o de copy profissional AIDA avan√ßada');
    } else {
      console.log('üöÄ Iniciando melhoria padr√£o de descri√ß√£o');
    }
    
    // Extrair os dados relevantes do corpo da requisi√ß√£o
    const { productId, title, description } = body;
    
    if (!productId) {
      console.error('ID do produto n√£o fornecido');
      return NextResponse.json({ 
        error: 'ID do produto √© obrigat√≥rio' 
      }, { status: 400 });
    }

    if (!title || !description) {
      console.error('T√≠tulo ou descri√ß√£o n√£o fornecidos');
      return NextResponse.json({ 
        error: 'T√≠tulo e descri√ß√£o s√£o obrigat√≥rios' 
      }, { status: 400 });
    }

    console.log('Processando melhoria para produto:', title);

    // Escolher o prompt baseado no modo
    let systemPrompt, userPrompt;
    
    if (isProCopyMode) {
      // Modo Pro Copy - usar o prompt mais avan√ßado e melhorado para formata√ß√£o HTML elegante
      systemPrompt = `Voc√™ √© um copywriter profissional e designer de conte√∫do para e-commerce especializado em criar descri√ß√µes de produtos de alta convers√£o com HTML elegante.

Como especialista em copywriting e design de conte√∫do, sua tarefa √© criar uma copy profissional com formata√ß√£o HTML perfeita.

DIRETRIZES DE FORMATA√á√ÉO HTML:
- Use tags HTML sem√¢nticas e limpas (<h2>, <h3>, <p>, <ul>, <li>)
- Aplique <strong> apenas em elementos-chave (benef√≠cios, caracter√≠sticas cruciais, n√∫meros)
- Nunca em frases inteiras ou par√°grafos
- Crie espa√ßamento adequado sem excessos entre elementos
- Adicione classes para elementos importantes:
  * <h2 class="product-title">
  * <h3 class="benefit-heading">
  * <ul class="features-list">
  * <div class="cta-container">
- Mantenha um layout clean com hierarquia visual clara
- Sem repeti√ß√µes de tags ou espa√ßamentos desnecess√°rios
- IMPORTANTE: N√ÉO inclua marca√ß√µes de c√≥digo como \`\`\`html ou \`\`\` no in√≠cio ou fim do conte√∫do

ESTRUTURA AIDA PERFEITA:
- ATEN√á√ÉO: T√≠tulo impactante em <h2> e gancho poderoso
- INTERESSE: Benef√≠cios em se√ß√µes com <h3> e √≠cones descritivos (usando HTML sem√¢ntico)
- DESEJO: Caracter√≠sticas em listas organizadas e provas sociais
- A√á√ÉO: Chamada clara com senso de urg√™ncia

AVANCADO: Adicione micro-elementos de persuas√£o:
- Pequenos destaques para n√∫meros
- Frases curtas de impacto
- Estrutura de par√°grafos variados (curto ‚Üí m√©dio ‚Üí curto)
- Destaques para garantias e benef√≠cios principais`;
  
      userPrompt = `Reescreva completamente a descri√ß√£o deste produto criando uma copy profissional com HTML perfeito.

T√≠tulo do produto: ${title}

Descri√ß√£o atual: 
${description}

INSTRU√á√ïES PARA FORMATA√á√ÉO HTML PERFEITA:

1. ESTRUTURA GERAL:
   - Evite espa√ßamentos excessivos (no m√°ximo uma linha entre elementos)
   - Mantenha consist√™ncia no estilo e indenta√ß√£o
   - Use no m√°ximo 3 n√≠veis hier√°rquicos (h2 ‚Üí h3 ‚Üí p/lists)
   - N√ÉO inclua \`\`\`html ou \`\`\` no in√≠cio ou fim do conte√∫do

2. NEGRITO (<strong>):
   - Use apenas para destacar palavras-chave estrat√©gicas
   - Nunca coloque par√°grafos inteiros em negrito
   - Destaque n√∫meros, benef√≠cios chave e caracter√≠sticas diferenciais
   - Exemplo: "Experimente <strong>30 dias</strong> de satisfa√ß√£o garantida"

3. LISTAS & ESPA√áAMENTO:
   - Use <ul class="features-list"> para caracter√≠sticas
   - Crie pequenos blocos de conte√∫do com margens adequadas
   - Use <div class="benefit-block"> para agrupar benef√≠cios relacionados
   - Mantenha consist√™ncia entre espa√ßamentos de elementos similares

4. CALL-TO-ACTION:
   - Coloque em <div class="cta-section"> com destaque especial
   - Uso estrat√©gico de <strong> apenas nas partes de a√ß√£o
   - Adicione senso de urg√™ncia com formata√ß√£o apropriada

CRIE a descri√ß√£o seguindo esta estrutura AIDA impec√°vel:

   A) ATEN√á√ÉO:
      - T√≠tulo chamativo √∫nico em <h2 class="main-title">
      - Subt√≠tulo em <p class="subtitle"> que complementa o t√≠tulo
      - Problema que o cliente enfrenta apresentado claramente

   B) INTERESSE:
      - 3-5 benef√≠cios em se√ß√µes com t√≠tulos <h3 class="benefit-title">
      - Cada benef√≠cio com explica√ß√£o persuasiva (max 2 par√°grafos)
      - Destaque de n√∫meros e resultados com <strong>

   C) DESEJO:
      - Lista organizada de caracter√≠sticas t√©cnicas
      - Se√ß√£o de "Por que escolher" com diferenciais
      - Prova social ou testemunho embutido (se aplic√°vel)

   D) A√á√ÉO:
      - Chamada direta e irresist√≠vel
      - Elimina√ß√£o de obje√ß√µes finais
      - Garantia ou pol√≠tica de devolu√ß√£o como seguran√ßa

Crie uma copy que seja extensa (800+ palavras), perfeita em HTML, extremamente persuasiva, e esteticamente elegante na formata√ß√£o.`;
    } else {
      // Modo padr√£o - usar o prompt aprimorado para formata√ß√£o HTML mais elegante
      systemPrompt = `Voc√™ √© um copywriter especializado em produtos f√≠sicos e formata√ß√£o HTML elegante.

IMPORTANTE: N√ÉO inclua marca√ß√µes de c√≥digo como \`\`\`html ou \`\`\` no in√≠cio ou fim do conte√∫do.`;

      userPrompt = `Voc√™ √© um copywriter especializado em produtos f√≠sicos e quero criar uma copy de alta convers√£o com HTML bem formatado para um ${title}.

Aqui est√° a descri√ß√£o atual do produto: ${description}

Gere uma copy validada utilizando a estrutura AIDA (Aten√ß√£o, Interesse, Desejo, A√ß√£o), com formata√ß√£o HTML elegante:

1. FORMATA√á√ÉO HTML:
   - Use <h2> e <h3> para t√≠tulos e subt√≠tulos
   - Par√°grafos em <p> com espa√ßamento adequado (sem excesso)
   - Listas em <ul><li> para caracter√≠sticas
   - Use <strong> apenas para destacar palavras-chave importantes, nunca par√°grafos inteiros
   - Mantenha consist√™ncia visual com espa√ßamento adequado
   - N√ÉO inclua \`\`\`html ou \`\`\` no in√≠cio ou fim do conte√∫do

2. CONTE√öDO PERSUASIVO:
   - Um gancho forte na introdu√ß√£o para capturar a aten√ß√£o
   - Uma promessa persuasiva clara e impactante
   - Benef√≠cios destacados de forma emocional e l√≥gica
   - Provas sociais ou diferenciais que gerem desejo
   - Uma chamada para a√ß√£o direta e irresist√≠vel

A copy deve ter formata√ß√£o HTML limpa, usar negrito apenas nas palavras estrat√©gicas, e estrutura visualmente agrad√°vel sem espa√ßamentos excessivos.`;
    }

    console.log('Enviando prompt para OpenAI', isProCopyMode ? '(modo pro_copy)' : '(modo padr√£o)');
    
    try {
      // Chamar a API da OpenAI com tipagem correta
      const completion = await openai.chat.completions.create({
        model: isProCopyMode ? "gpt-4o" : "gpt-4",
        messages: [
          {
            role: "system",
            content: systemPrompt
          } as any,
          { 
            role: "user", 
            content: userPrompt 
          } as any
        ],
        temperature: isProCopyMode ? 0.7 : 0.6,
        max_tokens: isProCopyMode ? 4000 : 2000
      });

      let improvedDescription = completion.choices[0]?.message?.content || '';

      if (!improvedDescription) {
        console.error('OpenAI n√£o retornou conte√∫do v√°lido');
        return NextResponse.json(
          { error: 'Falha ao gerar descri√ß√£o melhorada' },
          { status: 500 }
        );
      }
      
      // P√≥s-processamento do HTML para garantir formata√ß√£o perfeita
      improvedDescription = processHtml(improvedDescription);
      
      // Verificar a qualidade da descri√ß√£o gerada
      const descriptionQuality = analyzeDescriptionQuality(improvedDescription);
      console.log('Descri√ß√£o melhorada gerada com sucesso', descriptionQuality);

      // Atualizar o produto diretamente no banco
      const { error: updateError } = await supabase
        .from('products')
        .update({ 
          description: improvedDescription 
        })
        .eq('id', productId);
      
      if (updateError) {
        console.error('Erro ao atualizar descri√ß√£o do produto:', updateError);
        return NextResponse.json({ 
          error: 'Erro ao salvar descri√ß√£o melhorada: ' + updateError.message 
        }, { status: 500 });
      }
      
      console.log('Descri√ß√£o atualizada com sucesso');
      
      // Retorna a descri√ß√£o melhorada e confirma√ß√£o de que foi salva
      return NextResponse.json({
        success: true,
        description: improvedDescription,
        descriptionType: isProCopyMode ? 'pro_copy' : 'standard',
        qualityMetrics: descriptionQuality,
        message: isProCopyMode 
          ? 'Copy profissional AIDA gerada com sucesso' 
          : 'Descri√ß√£o melhorada com sucesso'
      });
    } catch (openaiError) {
      console.error('Erro na chamada OpenAI:', openaiError);
      return NextResponse.json(
        { error: 'Erro no servi√ßo de IA: ' + (openaiError instanceof Error ? openaiError.message : String(openaiError)) },
        { status: 503 }
      );
    }
  } catch (error) {
    console.error('Erro no processamento da requisi√ß√£o:', error);
    return NextResponse.json(
      { error: 'Erro ao processar melhoria da descri√ß√£o: ' + (error instanceof Error ? error.message : String(error)) },
      { status: 500 }
    );
  }
}

/**
 * Processa o HTML para garantir formata√ß√£o excelente
 */
function processHtml(html: string): string {
  let processed = html;
  
  // Remover marca√ß√µes Markdown de blocos de c√≥digo
  processed = processed.replace(/```html/g, '');
  processed = processed.replace(/```(\w+)?/g, '');
  processed = processed.replace(/```[\s\S]+?```/g, '');
  
  // Remover especificamente marca√ß√µes no in√≠cio do texto
  processed = processed.replace(/^```html\s*/, '');
  processed = processed.replace(/^```(\w+)?\s*/, '');
  processed = processed.replace(/\s*```\s*$/, '');
  
  // Remover caracteres de cita√ß√£o ou backticks soltos
  processed = processed.replace(/^['"`]{3,}/, '');
  processed = processed.replace(/['"`]{3,}$/, '');
  
  // Remover espa√ßos em branco excessivos entre tags
  processed = processed.replace(/>\s{2,}</g, '>\n<');
  
  // Remover m√∫ltiplas quebras de linha
  processed = processed.replace(/(\r\n|\n){3,}/g, '\n\n');
  
  // Adicionar classes para elementos principais se n√£o existirem
  if (!processed.includes('class="main-title"') && !processed.includes('class="product-title"')) {
    processed = processed.replace(/<h2>/i, '<h2 class="product-title">');
  }
  
  // Adicionar classes para listas se n√£o existirem
  if (!processed.includes('class="features-list"')) {
    processed = processed.replace(/<ul>/i, '<ul class="features-list">');
  }
  
  // Adicionar classes para chamaodas para a√ß√£o se identificadas
  const ctaMatch = processed.match(/<p>([^<]*?\b(compre|adquira|garanta|obtenha|comprar)\b[^<]*?)<\/p>/i);
  if (ctaMatch && !processed.includes('class="cta"')) {
    processed = processed.replace(
      ctaMatch[0], 
      `<p class="cta">${ctaMatch[1]}</p>`
    );
  }
  
  // Adicionar uma div de container para CTA no final se tiver "compre", "adquira", etc
  if (!processed.includes('class="cta-container"') && 
      /\b(compre|adquira|garanta|obtenha|comprar)\b/i.test(processed.slice(-200))) {
    
    // Encontrar o √∫ltimo par√°grafo que tenha CTA
    const paragraphs = processed.split('</p>');
    let lastIndex = paragraphs.length - 1;
    
    while (lastIndex >= 0) {
      if (/\b(compre|adquira|garanta|obtenha|comprar)\b/i.test(paragraphs[lastIndex])) {
        break;
      }
      lastIndex--;
    }
    
    if (lastIndex >= 0) {
      const beforeCta = paragraphs.slice(0, lastIndex).join('</p>') + '</p>';
      const ctaParagraph = paragraphs[lastIndex] + '</p>';
      const afterCta = paragraphs.slice(lastIndex + 1).join('</p>');
      
      processed = `${beforeCta}<div class="cta-container">${ctaParagraph}</div>${afterCta}`;
    }
  }
  
  // Corrigir tags mal formadas
  processed = processed.replace(/<\/strong<\/p>/g, '</strong></p>');
  processed = processed.replace(/<p><strong>(.*?)<\/p>/g, '<p><strong>$1</strong></p>');
  
  // Evitar negrito em par√°grafos completos
  processed = processed.replace(/<p><strong>([^<]{60,})<\/strong><\/p>/g, '<p>$1</p>');
  
  // Adicionar estilos customizados para melhorar a apresenta√ß√£o
  const customStyles = `
<style>
  .product-title {
    font-size: 1.75rem;
    color: #333;
    margin-bottom: 1rem;
    line-height: 1.2;
  }
  h3 {
    font-size: 1.25rem;
    color: #444;
    margin-top: 1.5rem;
    margin-bottom: 0.5rem;
  }
  .features-list {
    padding-left: 1.25rem;
    margin: 1rem 0;
  }
  .features-list li {
    margin-bottom: 0.5rem;
    position: relative;
  }
  .cta-container {
    background-color: #f8f9fa;
    border-left: 4px solid #4a90e2;
    padding: 1rem;
    margin: 1.5rem 0;
    border-radius: 4px;
  }
  .cta {
    font-size: 1.1rem;
    font-weight: bold;
    color: #333;
  }
  strong {
    color: #222;
  }
</style>
`;
  
  // Adicionar os estilos ao in√≠cio, mas ap√≥s qualquer tag doctype ou html existente
  if (!processed.includes('<style>')) {
    // Se j√° come√ßar com uma tag html ou doctype, inserir ap√≥s
    if (processed.match(/^<!DOCTYPE|^<html/i)) {
      const match = processed.match(/^(<!DOCTYPE[^>]*>|<html[^>]*>)/i);
      if (match) {
        const openingTag = match[0];
        processed = processed.replace(openingTag, openingTag + customStyles);
      }
    } else {
      processed = customStyles + processed;
    }
  }
  
  return processed;
}

/**
 * Analisa a qualidade da descri√ß√£o gerada
 */
function analyzeDescriptionQuality(description: string) {
  // Contar o n√∫mero de palavras
  const wordCount = description.replace(/<[^>]*>/g, ' ')
    .split(/\s+/)
    .filter(word => word.length > 0)
    .length;
  
  // Verificar se cont√©m tags HTML
  const hasHtmlTags = /<[a-z][^>]*>/i.test(description);
  
  // Verificar se cont√©m listas
  const hasLists = /<ul>|<ol>|<li>/i.test(description);
  
  // Verificar se cont√©m cabe√ßalhos
  const hasHeadings = /<h[1-6]/i.test(description);
  
  // Verificar se cont√©m elementos de destaque
  const hasEmphasis = /<strong>|<em>|<b>|<i>/i.test(description);
  
  // Verificar se cont√©m chamada para a√ß√£o
  const hasCTA = /compre|adquira|garanta|pe√ßa agora|comprar|adicione ao carrinho/i.test(description);
  
  // Verificar se cont√©m classes CSS
  const hasCustomClasses = /class=["'][^"']+["']/i.test(description);
  
  // Verificar se usa negrito de forma adequada
  const boldUsage = description.match(/<strong>[^<]+<\/strong>/g);
  const appropriateBold = boldUsage ? 
    boldUsage.every(bold => bold.length < 80) && 
    boldUsage.length < description.length / 100 : 
    false;
  
  return {
    wordCount,
    hasHtmlTags,
    hasLists,
    hasHeadings,
    hasEmphasis,
    hasCTA,
    hasCustomClasses,
    appropriateBold,
    quality: wordCount > 800 ? 'excelente' : wordCount > 400 ? 'boa' : 'b√°sica',
    formattingQuality: (hasHtmlTags && hasHeadings && hasCustomClasses && appropriateBold) ? 'excelente' : 'b√°sica'
  };
} 